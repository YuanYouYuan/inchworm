% this function aims to compute the torque of joint by lagrangian
% it's for three joints 2D inchworm model
% and we assume the 1st joint(the 3rd joint in real inchworm robot) is at the origin of the coordinate 

function torque = traj_torque(traj)

torque_formula = load('./data/torque_formula');
% torque_formula_on_wall = load('./data/torque_formula_on_wall');

th1 = traj.th(3,:);     th2 = traj.th(4,:);     th3 = traj.th(5,:);
dth1 = traj.dth(3,:);   dth2 = traj.dth(4,:);   dth3 = traj.dth(5,:);
ddth1 = traj.ddth(3,:); ddth2 = traj.ddth(4,:); ddth3 = traj.ddth(5,:);

for i = 1:3
    torque(i, :) = subs(torque_formula.(['torque' num2str(i)]), ... 
                    {'th1', 'th2', 'th3', 'dth1', 'dth2', 'dth3', 'ddth1', 'ddth2', 'ddth3'}, ...
                    {th1, th2, th3, dth1, dth2, dth3, ddth1, ddth2, ddth3});
end


% torque(1, :) = I1*ddth1 + L1^2*M2*ddth1 + L1^2*M3*ddth1 + L2^2*M3*ddth1 + L2^2*M3*ddth2 ...
% 			+ M1*ddth1*X1^2 + M2*ddth1*X2^2 + M2*ddth2*X2^2 + M3*ddth1*X3^2 + M3*ddth2*X3^2 ...
% 			+ M3*ddth3*X3^2 - L2*M3*G*sin(th1 + th2) - M2*G*X2*sin(th1 + th2) - L1*M2*G*sin(th1) ...
% 			- L1*M3*G*sin(th1) - M1*G*X1*sin(th1) - M3*G*X3*sin(th1 + th2 + th3) ... 
% 			- L1*M2*dth2.^2*X2.*sin(th2) - L2*M3*dth3.^2*X3.*sin(th3) ... 
% 			+ 2*L1*M3*ddth1*X3.*cos(th2 + th3) + L1*M3*ddth2*X3.*cos(th2 + th3) ... 
% 			+ L1*M3*ddth3*X3.*cos(th2 + th3) + 2*L1*L2*M3*ddth1.*cos(th2) ... 
% 			+ L1*L2*M3*ddth2.*cos(th2) + 2*L1*M2*ddth1*X2.*cos(th2) + L1*M2*ddth2*X2.*cos(th2) ...
% 			+ 2*L2*M3*ddth1*X3.*cos(th3) + 2*L2*M3*ddth2*X3.*cos(th3) + L2*M3*ddth3*X3.*cos(th3) ...
% 			- L1*M3*dth2.^2*X3.*sin(th2 + th3) - L1*M3*dth3.^2*X3.*sin(th2 + th3) ... 
% 			- L1*L2*M3*dth2.^2.*sin(th2) - 2*L1*M2*dth1.*dth2*X2.*sin(th2) ...
% 			- 2*L2*M3*dth1.*dth3*X3.*sin(th3) - 2*L2*M3*dth2.*dth3*X3.*sin(th3) ...
% 			- 2*L1*M3*dth1.*dth2*X3.*sin(th2 + th3) - 2*L1*M3*dth1.*dth3*X3.*sin(th2 + th3) ...
% 			- 2*L1*M3*dth2.*dth3*X3.*sin(th2 + th3) - 2*L1*L2*M3*dth1.*dth2.*sin(th2);
% 
% torque(2, :) = I2*ddth2 + L2^2*M3*ddth1 + L2^2*M3*ddth2 + M2*ddth1*X2^2 + M2*ddth2*X2^2 ...
% 			+ M3*ddth1*X3^2 + M3*ddth2*X3^2 + M3*ddth3*X3^2 - L2*M3*G.*sin(th1 + th2) ...
% 			- M2*G*X2.*sin(th1 + th2) - M3*G*X3.*sin(th1 + th2 + th3) + L1*M2*dth1.^2*X2.*sin(th2) ...
% 			- L2*M3*dth3.^2*X3.*sin(th3) + L1*M3*ddth1*X3.*cos(th2 + th3) + L1*L2*M3*ddth1.*cos(th2) ...
% 			+ L1*M2*ddth1*X2.*cos(th2) + 2*L2*M3*ddth1*X3.*cos(th3) + 2*L2*M3*ddth2*X3.*cos(th3) ... 
% 			+ L2*M3*ddth3*X3.*cos(th3) + L1*M3*dth1.^2*X3.*sin(th2 + th3) + L1*L2*M3*dth1.^2.*sin(th2) ...
% 			- 2*L2*M3*dth1.*dth3*X3.*sin(th3) - 2*L2*M3*dth2.*dth3*X3.*sin(th3);
% 
% 
% torque(3, :) = I3*ddth3 + M3*ddth1*X3^2 + M3*ddth2*X3^2 + M3*ddth3*X3^2 ...
% 			- M3*G*X3.*sin(th1 + th2 + th3) + L2*M3*dth1.^2*X3.*sin(th3) ...
% 			+ L2*M3*dth2.^2*X3.*sin(th3) + L1*M3*ddth1*X3.*cos(th2 + th3) ...
% 			+ L2*M3*ddth1*X3.*cos(th3) + L2*M3.*ddth2*X3.*cos(th3) ...
% 			+ L1*M3*dth1.^2*X3.*sin(th2 + th3) + 2*L2*M3*dth1.*dth2*X3.*sin(th3);
